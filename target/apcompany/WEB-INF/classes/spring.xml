<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:tx="http://www.springframework.org/schema/tx" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd 
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.3.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-4.3.xsd 		
		">
    <!-- 引入dbconfig.properties属性文件 -->
    <context:property-placeholder location="classpath:dbconfig.properties" />
    <!-- <mvc:annotation-driven /> -->
  <!--   <mvc:annotation-driven>
     	<mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
   		</mvc:message-converters>
	</mvc:annotation-driven> -->
	<!--注解说明  
    <context:annotation-config />--> 
    <!-- 自动扫描(自动注入)，扫描me.gacl.service这个包以及它的子包的所有使用@Service注解标注的类 -->
    <context:component-scan base-package="com.apcompany.*.service" />
    <context:component-scan base-package="com">
		<context:include-filter type="regex" expression=".apcompany.*.controller.*" />
	</context:component-scan>
     <!--  @Controller 声明Action组件
	@Service    声明Service组件    @Service("myMovieLister") 
	@Repository 声明Dao组件
	@Component   泛指组件, 当不好归类时. 
	@RequestMapping("/menu")  请求映射
	@Resource  用于注入，( j2ee提供的 ) 默认按名称装配，@Resource(name="beanName") 
	@Autowired 用于注入，(spring提供的) 默认按类型装配 
	@Transactional( rollbackFor={Exception.class}) 事务管理
	@ResponseBody
	@Scope("prototype")   设定bean的作用域 -->
	<mvc:annotation-driven>  
    <mvc:message-converters register-defaults="true">  
        <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->  
        <bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">  
            <property name="supportedMediaTypes">  
                <list>  
                    <value>application/json;charset=UTF-8</value>
                    <value>text/html;charset=UTF-8</value>
                </list>  
            </property>  
        </bean>  
    </mvc:message-converters>  
	</mvc:annotation-driven> 
	<!--<context:component-scan base-package="com.apcompany.*.controller" />  -->
	<mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>
	<mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>
	<mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/>
	<mvc:resources mapping="/bootstrap/**" location="/bootstrap/" cache-period="31556926"/>
	<mvc:resources mapping="/fonts/**" location="/fonts/" cache-period="31556926"/>
	<bean name="handlerAdapter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" >
		<!--<property name="messageConverters">
			<list>
				 <ref bean="byteArray_hmc" />
				<ref bean="string_hmc" /> 
			</list>
		</property>-->
	</bean>
	<!-- <bean id="byteArray_hmc" class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />处理..
	<bean id="string_hmc" class="org.springframework.http.converter.StringHttpMessageConverter" />处理..  -->
	<bean name="handlerMapping" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
		<!-- 只会拦截@RequestMapping的URL
		<property name="interceptors">
		     <list>
		         <bean class="com.mvc.MyInteceptor"></bean>
		     </list>
		 </property> -->
	</bean>	
		<!-- freemarker的配置 -->  
   <!--  <bean id="freemarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/view/" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">10</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="number_format">#.##</prop>
            </props>
        </property>
    </bean> -->
    <!-- FreeMarker视图解析 如返回userinfo。。在这里配置后缀名ftl和视图解析器。。 -->  
   <!--  <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">  
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />  
        <property name="suffix" value=".jsp" />  
        <property name="contentType" value="text/html;charset=UTF-8" />
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <property name="exposeSpringMacroHelpers" value="true" />
    </bean> -->
    <!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
        p:basename="i18n/messages" />
    <!-- 总错误处理
	这里主要的类是SimpleMappingExceptionResolver类，和他的父类AbstractHandlerExceptionResolver类。
	具体可以配置哪些属性，我是通过查看源码知道的。
	你也可以实现HandlerExceptionResolver接口，写一个自己的异常处理程序。
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView">
		 	<value>/error/error</value> error页面可以通过Exception e = (Exception)request.getAttribute("exception")获得异常信息
		</property>
		<property name="defaultStatusCode">
		 	<value>500</value>
		</property>
		<property name="warnLogCategory">
		 	<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>
		</property>
	</bean>-->
	<bean id="multipartResolver"   class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
        <!-- 设置上传文件的最大尺寸为10MB -->    
        <property name="maxUploadSize">    
            <value>1048576000</value>    
        </property>    
            <property name="maxInMemorySize">  
            <value>1024</value>  
        </property>  
    </bean>
<!--     <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">    
    <property name="supportedMediaTypes">    
        <list>    
            <value>text/html;charset=UTF-8</value>    
        </list>    
    </property>    
	</bean> 
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">    
    <property name="messageConverters">    
        <list>    
            <ref bean="mappingJacksonHttpMessageConverter" />json转换器    
        </list>    
    </property>    
	</bean> --> 
</beans>